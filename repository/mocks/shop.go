// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	"github.com/EmirShimshir/marketplace-domain/domain"
	mock "github.com/stretchr/testify/mock"
)

// ShopRepository is an autogenerated mock type for the IShopRepository type
type ShopRepository struct {
	mock.Mock
}

// CreateShop provides a mock function with given fields: ctx, shop
func (_m *ShopRepository) CreateShop(ctx context.Context, shop domain.Shop) (domain.Shop, error) {
	ret := _m.Called(ctx, shop)

	if len(ret) == 0 {
		panic("no return value specified for CreateShop")
	}

	var r0 domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Shop) (domain.Shop, error)); ok {
		return rf(ctx, shop)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Shop) domain.Shop); ok {
		r0 = rf(ctx, shop)
	} else {
		r0 = ret.Get(0).(domain.Shop)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Shop) error); ok {
		r1 = rf(ctx, shop)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateShopItem provides a mock function with given fields: ctx, shopItem, product
func (_m *ShopRepository) CreateShopItem(ctx context.Context, shopItem domain.ShopItem, product domain.Product) (domain.ShopItem, error) {
	ret := _m.Called(ctx, shopItem, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateShopItem")
	}

	var r0 domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ShopItem, domain.Product) (domain.ShopItem, error)); ok {
		return rf(ctx, shopItem, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ShopItem, domain.Product) domain.ShopItem); ok {
		r0 = rf(ctx, shopItem, product)
	} else {
		r0 = ret.Get(0).(domain.ShopItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ShopItem, domain.Product) error); ok {
		r1 = rf(ctx, shopItem, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteShop provides a mock function with given fields: ctx, shopID
func (_m *ShopRepository) DeleteShop(ctx context.Context, shopID domain.ID) error {
	ret := _m.Called(ctx, shopID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) error); ok {
		r0 = rf(ctx, shopID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShopItem provides a mock function with given fields: ctx, shopItemID
func (_m *ShopRepository) DeleteShopItem(ctx context.Context, shopItemID domain.ID) error {
	ret := _m.Called(ctx, shopItemID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShopItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) error); ok {
		r0 = rf(ctx, shopItemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShopByID provides a mock function with given fields: ctx, shopID
func (_m *ShopRepository) GetShopByID(ctx context.Context, shopID domain.ID) (domain.Shop, error) {
	ret := _m.Called(ctx, shopID)

	if len(ret) == 0 {
		panic("no return value specified for GetShopByID")
	}

	var r0 domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.Shop, error)); ok {
		return rf(ctx, shopID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.Shop); ok {
		r0 = rf(ctx, shopID)
	} else {
		r0 = ret.Get(0).(domain.Shop)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopBySellerID provides a mock function with given fields: ctx, sellerID
func (_m *ShopRepository) GetShopBySellerID(ctx context.Context, sellerID domain.ID) ([]domain.Shop, error) {
	ret := _m.Called(ctx, sellerID)

	if len(ret) == 0 {
		panic("no return value specified for GetShopBySellerID")
	}

	var r0 []domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) ([]domain.Shop, error)); ok {
		return rf(ctx, sellerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) []domain.Shop); ok {
		r0 = rf(ctx, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Shop)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopItemByID provides a mock function with given fields: ctx, shopItemID
func (_m *ShopRepository) GetShopItemByID(ctx context.Context, shopItemID domain.ID) (domain.ShopItem, error) {
	ret := _m.Called(ctx, shopItemID)

	if len(ret) == 0 {
		panic("no return value specified for GetShopItemByID")
	}

	var r0 domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.ShopItem, error)); ok {
		return rf(ctx, shopItemID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.ShopItem); ok {
		r0 = rf(ctx, shopItemID)
	} else {
		r0 = ret.Get(0).(domain.ShopItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, shopItemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopItemByProductID provides a mock function with given fields: ctx, productID
func (_m *ShopRepository) GetShopItemByProductID(ctx context.Context, productID domain.ID) (domain.ShopItem, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetShopItemByProductID")
	}

	var r0 domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) (domain.ShopItem, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ID) domain.ShopItem); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(domain.ShopItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ID) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopItems provides a mock function with given fields: ctx, limit, offset
func (_m *ShopRepository) GetShopItems(ctx context.Context, limit int64, offset int64) ([]domain.ShopItem, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetShopItems")
	}

	var r0 []domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]domain.ShopItem, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []domain.ShopItem); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ShopItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShops provides a mock function with given fields: ctx, limit, offset
func (_m *ShopRepository) GetShops(ctx context.Context, limit int64, offset int64) ([]domain.Shop, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetShops")
	}

	var r0 []domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]domain.Shop, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []domain.Shop); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Shop)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateShop provides a mock function with given fields: ctx, shop
func (_m *ShopRepository) UpdateShop(ctx context.Context, shop domain.Shop) (domain.Shop, error) {
	ret := _m.Called(ctx, shop)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShop")
	}

	var r0 domain.Shop
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Shop) (domain.Shop, error)); ok {
		return rf(ctx, shop)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Shop) domain.Shop); ok {
		r0 = rf(ctx, shop)
	} else {
		r0 = ret.Get(0).(domain.Shop)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Shop) error); ok {
		r1 = rf(ctx, shop)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateShopItem provides a mock function with given fields: ctx, shopItem
func (_m *ShopRepository) UpdateShopItem(ctx context.Context, shopItem domain.ShopItem) (domain.ShopItem, error) {
	ret := _m.Called(ctx, shopItem)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShopItem")
	}

	var r0 domain.ShopItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ShopItem) (domain.ShopItem, error)); ok {
		return rf(ctx, shopItem)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ShopItem) domain.ShopItem); ok {
		r0 = rf(ctx, shopItem)
	} else {
		r0 = ret.Get(0).(domain.ShopItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ShopItem) error); ok {
		r1 = rf(ctx, shopItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShopRepository creates a new instance of ShopRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShopRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShopRepository {
	mock := &ShopRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
